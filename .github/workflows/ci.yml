name: Anchor CI/CD
on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  REGISTRY: ${{ secrets.HARBOR_REGISTRY }}  
  REPO: anchor/anchor                        
  TAG: ${{ github.sha }}                     

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # 0) Checkout
      - name: Checkout
        uses: actions/checkout@v4

      # 1) Unit tests (pytest)
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Run unit tests
        run: pytest -v

      # 2) Lint Dockerfile (part of security/quality gate)
      - name: Lint Dockerfile with Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile

      # 3) Log in to Harbor (only after tests/lint succeed)
      - name: Log in to Harbor
        run: echo "${{ secrets.HARBOR_PASSWORD }}" | docker login "${{ env.REGISTRY }}" -u "${{ secrets.HARBOR_USERNAME }}" --password-stdin

      # 4) Build image (only runs if previous steps passed)
      - name: Build Docker image
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.REPO }}"
          docker build -t "$IMAGE:${{ env.TAG }}" -t "$IMAGE:latest" .

      # 5) Scan image with Trivy (fail on HIGH/CRITICAL)
      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.REPO }}:${{ env.TAG }}
          format: 'table'
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'
          exit-code: '1'      # fail pipeline on findings

      # 6) Push image to Harbor (only if scan passed)
      - name: Push image to Harbor
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.REPO }}"
          docker push "$IMAGE:${{ env.TAG }}"
          docker push "$IMAGE:latest"
